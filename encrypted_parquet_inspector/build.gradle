plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.example'
version = '1.0.2'

java {
  toolchain { languageVersion = JavaLanguageVersion.of(17) }
}

repositories { mavenCentral() }

dependencies {
  implementation 'org.apache.parquet:parquet-hadoop:1.16.0'
  constraints {
    implementation 'org.apache.parquet:parquet-format-structures:1.16.0'
  }

  implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
  testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
  implementation 'org.slf4j:slf4j-simple:2.0.13'

  // Hadoop bits parquet-hadoop touches at runtime
  implementation('org.apache.hadoop:hadoop-common:3.3.6') {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'log4j', module: 'log4j'
    exclude group: 'ch.qos.reload4j', module: 'reload4j'
  }
  implementation('org.apache.hadoop:hadoop-mapreduce-client-core:3.3.6') {
    exclude group: 'org.slf4j'
    exclude group: 'log4j'
    exclude group: 'ch.qos.reload4j'
  }
  implementation 'org.apache.hadoop:hadoop-annotations:3.3.6'

  testImplementation project(':parquet_sample_generator')

  // --- JUnit 5 ---
  testImplementation platform('org.junit:junit-bom:5.10.2')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
  mainClass = 'org.example.encrypted_parquet_inspector.Inspector'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

tasks.named('shadowJar') {
  archiveBaseName.set('encrypted_parquet_inspector')
  archiveClassifier.set('')
  archiveVersion.set(project.version as String)
  manifest { attributes('Main-Class': application.mainClass.get()) }
}

tasks.named('jar') { enabled = false }

tasks.named('startScripts') { dependsOn(tasks.named('shadowJar')) }
tasks.named('distZip')      { dependsOn(tasks.named('shadowJar')) }
tasks.named('distTar')      { dependsOn(tasks.named('shadowJar')) }

tasks.named('run') {
  standardInput = System.in
}

tasks.test {
  useJUnitPlatform()
  testLogging { events "passed", "skipped", "failed" }
}
